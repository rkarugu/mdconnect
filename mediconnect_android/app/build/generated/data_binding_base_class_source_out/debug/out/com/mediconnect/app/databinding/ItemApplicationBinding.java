// Generated by view binder compiler. Do not edit!
package com.mediconnect.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.card.MaterialCardView;
import com.mediconnect.app.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemApplicationBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final Button btnViewDetails;

  @NonNull
  public final TextView tvAppliedDate;

  @NonNull
  public final TextView tvEmployer;

  @NonNull
  public final TextView tvJobTitle;

  @NonNull
  public final TextView tvStatus;

  private ItemApplicationBinding(@NonNull MaterialCardView rootView, @NonNull Button btnViewDetails,
      @NonNull TextView tvAppliedDate, @NonNull TextView tvEmployer, @NonNull TextView tvJobTitle,
      @NonNull TextView tvStatus) {
    this.rootView = rootView;
    this.btnViewDetails = btnViewDetails;
    this.tvAppliedDate = tvAppliedDate;
    this.tvEmployer = tvEmployer;
    this.tvJobTitle = tvJobTitle;
    this.tvStatus = tvStatus;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemApplicationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemApplicationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_application, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemApplicationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnViewDetails;
      Button btnViewDetails = ViewBindings.findChildViewById(rootView, id);
      if (btnViewDetails == null) {
        break missingId;
      }

      id = R.id.tvAppliedDate;
      TextView tvAppliedDate = ViewBindings.findChildViewById(rootView, id);
      if (tvAppliedDate == null) {
        break missingId;
      }

      id = R.id.tvEmployer;
      TextView tvEmployer = ViewBindings.findChildViewById(rootView, id);
      if (tvEmployer == null) {
        break missingId;
      }

      id = R.id.tvJobTitle;
      TextView tvJobTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvJobTitle == null) {
        break missingId;
      }

      id = R.id.tvStatus;
      TextView tvStatus = ViewBindings.findChildViewById(rootView, id);
      if (tvStatus == null) {
        break missingId;
      }

      return new ItemApplicationBinding((MaterialCardView) rootView, btnViewDetails, tvAppliedDate,
          tvEmployer, tvJobTitle, tvStatus);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
